{"almostempty":{"{{GENERATE_BSON}}":"*bson_document = bson_new();\nbson_t *children = (bson_t*)malloc(sizeof(bson_t) * 0);\nBSON_APPEND_INT32(*bson_document, \"id\", data->id);\nBSON_APPEND_UTF8(*bson_document, \"sessionName\", data->sessionName);\nBSON_APPEND_INT64(*bson_document, \"timestamp\", data->timestamp);\n","{{GENERATE_CONFIG_ALLOCATOR}}":"","{{GENERATE_CONFIG_DEALLOCATOR}}":"","{{GENERATE_CONFIG_PARSER}}":"static void parseJsonTokens(const jsmntok_t *json_tokens, int tokens_length, const char *json_string, config_t *config) {\n\tint _i, *i = &_i;\n\tfor (*i = 1; *i < tokens_length; ++(*i)) {\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n","{{GENERATE_CONFIG_PRINT}}":"","{{GENERATE_CONFIG_TYPE}}":"typedef struct {\n} config_t;\n","{{GENERATE_STRUCTURE_ALLOCATOR}}":"","{{GENERATE_STRUCTURE_DEALLOCATOR}}":"free(data);\n","{{GENERATE_STRUCTURE_TYPE}}":"typedef struct {\n\tint id;\n\tchar* sessionName;\n\tlong timestamp;\n} data_t;\n"},"tests":{"/home/toscan/dev/eagletrt-code-generator/test/test-assets/generate/test1":{"{{GENERATE_BSON}}":"*bson_document = bson_new();\nbson_t *children = (bson_t*)malloc(sizeof(bson_t) * 5);\nBSON_APPEND_INT32(*bson_document, \"id\", data->id);\nBSON_APPEND_INT64(*bson_document, \"timestamp\", data->timestamp);\nBSON_APPEND_UTF8(*bson_document, \"sessionName\", data->sessionName);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"inverters\", &children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"right\", &children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"speed\", &children[2]);\nfor (int i = 0; i < (data->inverters.right.speed_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.right.speed[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.right.speed[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_igbt\", &children[2]);\nfor (int i = 0; i < (data->inverters.right.temperature_igbt_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.right.temperature_igbt[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.right.temperature_igbt[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_motors\", &children[2]);\nfor (int i = 0; i < (data->inverters.right.temperature_motors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.right.temperature_motors[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.right.temperature_motors[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nbson_append_document_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"left\", &children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"speed\", &children[2]);\nfor (int i = 0; i < (data->inverters.left.speed_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.left.speed[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.left.speed[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_igbt\", &children[2]);\nfor (int i = 0; i < (data->inverters.left.temperature_igbt_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.left.temperature_igbt[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.left.temperature_igbt[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_motors\", &children[2]);\nfor (int i = 0; i < (data->inverters.left.temperature_motors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.left.temperature_motors[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.left.temperature_motors[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nbson_append_document_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"bms_hv\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"temperature\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.temperature_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.temperature[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"max\", data->bms_hv.temperature[i].value.max);\n\tBSON_APPEND_DOUBLE(&children[3], \"min\", data->bms_hv.temperature[i].value.min);\n\tBSON_APPEND_DOUBLE(&children[3], \"average\", data->bms_hv.temperature[i].value.average);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"voltage\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.voltage_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.voltage[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"max\", data->bms_hv.voltage[i].value.max);\n\tBSON_APPEND_DOUBLE(&children[3], \"min\", data->bms_hv.voltage[i].value.min);\n\tBSON_APPEND_DOUBLE(&children[3], \"total\", data->bms_hv.voltage[i].value.total);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"current\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.current_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.current[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"current\", data->bms_hv.current[i].value.current);\n\tBSON_APPEND_DOUBLE(&children[3], \"pow\", data->bms_hv.current[i].value.pow);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"errors\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.errors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.errors[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_INT32(&children[3], \"fault_id\", data->bms_hv.errors[i].value.fault_id);\n\tBSON_APPEND_INT32(&children[3], \"fault_index\", data->bms_hv.errors[i].value.fault_index);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"warnings\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.warnings_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.warnings[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_INT32(&children[3], \"fault_id\", data->bms_hv.warnings[i].value.fault_id);\n\tBSON_APPEND_INT32(&children[3], \"fault_index\", data->bms_hv.warnings[i].value.fault_index);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"bms_lv\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"values\", &children[1]);\nfor (int i = 0; i < (data->bms_lv.values_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_lv.values[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"voltage\", data->bms_lv.values[i].value.voltage);\n\tBSON_APPEND_DOUBLE(&children[3], \"temperature\", data->bms_lv.values[i].value.temperature);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"errors\", &children[1]);\nfor (int i = 0; i < (data->bms_lv.errors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_lv.errors[i].timestamp);\n\tBSON_APPEND_INT32(&children[2], \"value\", data->bms_lv.errors[i].value);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"gps\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"new\", &children[1]);\nfor (int i = 0; i < (data->gps.new_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->gps.new[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_GGA_safe\", data->gps.new[i].value.latitude_GGA_safe);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_GGA_safe\", data->gps.new[i].value.longitude_GGA_safe);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_GGA\", data->gps.new[i].value.latitude_GGA);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_GGA\", data->gps.new[i].value.longitude_GGA);\n\tBSON_APPEND_DOUBLE(&children[3], \"altitude_GGA\", data->gps.new[i].value.altitude_GGA);\n\tBSON_APPEND_UTF8(&children[3], \"ns_indicator_GGA\", data->gps.new[i].value.ns_indicator_GGA);\n\tBSON_APPEND_UTF8(&children[3], \"ew_indicator_GGA\", data->gps.new[i].value.ew_indicator_GGA);\n\tBSON_APPEND_UTF8(&children[3], \"utc_time_GGA\", data->gps.new[i].value.utc_time_GGA);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_GLL\", data->gps.new[i].value.latitude_GLL);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_GLL\", data->gps.new[i].value.longitude_GLL);\n\tBSON_APPEND_UTF8(&children[3], \"ns_indicator_GLL\", data->gps.new[i].value.ns_indicator_GLL);\n\tBSON_APPEND_UTF8(&children[3], \"ew_indicator_GLL\", data->gps.new[i].value.ew_indicator_GLL);\n\tBSON_APPEND_UTF8(&children[3], \"utc_time_GLL\", data->gps.new[i].value.utc_time_GLL);\n\tBSON_APPEND_DOUBLE(&children[3], \"ground_speed_knots_VTG\", data->gps.new[i].value.ground_speed_knots_VTG);\n\tBSON_APPEND_DOUBLE(&children[3], \"ground_speed_human_VTG\", data->gps.new[i].value.ground_speed_human_VTG);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_RMC\", data->gps.new[i].value.latitude_RMC);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_RMC\", data->gps.new[i].value.longitude_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"ns_indicator_RMC\", data->gps.new[i].value.ns_indicator_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"ew_indicator_RMC\", data->gps.new[i].value.ew_indicator_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"utc_time_RMC\", data->gps.new[i].value.utc_time_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"date_RMC\", data->gps.new[i].value.date_RMC);\n\tBSON_APPEND_DOUBLE(&children[3], \"ground_speed_knots_RMC\", data->gps.new[i].value.ground_speed_knots_RMC);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"old\", &children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"location\", &children[2]);\nfor (int i = 0; i < (data->gps.old.location_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->gps.old.location[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[3], \"value\", &children[4]);\n\tBSON_APPEND_DOUBLE(&children[4], \"latitude_m\", data->gps.old.location[i].value.latitude_m);\n\tBSON_APPEND_INT32(&children[4], \"latitude_o\", data->gps.old.location[i].value.latitude_o);\n\tBSON_APPEND_DOUBLE(&children[4], \"longitude_m\", data->gps.old.location[i].value.longitude_m);\n\tBSON_APPEND_INT32(&children[4], \"longitude_o\", data->gps.old.location[i].value.longitude_o);\n\tBSON_APPEND_DOUBLE(&children[4], \"speed\", data->gps.old.location[i].value.speed);\n\tBSON_APPEND_DOUBLE(&children[4], \"altitude\", data->gps.old.location[i].value.altitude);\n\tbson_append_document_end(&children[3], &children[4]);\n\tbson_destroy(&children[4]);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"time\", &children[2]);\nfor (int i = 0; i < (data->gps.old.time_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->gps.old.time[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[3], \"value\", &children[4]);\n\tBSON_APPEND_INT32(&children[4], \"hours\", data->gps.old.time[i].value.hours);\n\tBSON_APPEND_INT32(&children[4], \"minutes\", data->gps.old.time[i].value.minutes);\n\tBSON_APPEND_INT32(&children[4], \"seconds\", data->gps.old.time[i].value.seconds);\n\tbson_append_document_end(&children[3], &children[4]);\n\tbson_destroy(&children[4]);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"true_track_mode\", &children[2]);\nfor (int i = 0; i < (data->gps.old.true_track_mode_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->gps.old.true_track_mode[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->gps.old.true_track_mode[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nbson_append_document_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"imu_gyro\", &children[0]);\nfor (int i = 0; i < (data->imu_gyro_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->imu_gyro[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"x\", data->imu_gyro[i].value.x);\n\tBSON_APPEND_DOUBLE(&children[2], \"y\", data->imu_gyro[i].value.y);\n\tBSON_APPEND_DOUBLE(&children[2], \"z\", data->imu_gyro[i].value.z);\n\tBSON_APPEND_DOUBLE(&children[2], \"scale\", data->imu_gyro[i].value.scale);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"imu_accel\", &children[0]);\nfor (int i = 0; i < (data->imu_accel_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->imu_accel[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"x\", data->imu_accel[i].value.x);\n\tBSON_APPEND_DOUBLE(&children[2], \"y\", data->imu_accel[i].value.y);\n\tBSON_APPEND_DOUBLE(&children[2], \"z\", data->imu_accel[i].value.z);\n\tBSON_APPEND_DOUBLE(&children[2], \"scale\", data->imu_accel[i].value.scale);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"front_wheels_encoder\", &children[0]);\nfor (int i = 0; i < (data->front_wheels_encoder_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->front_wheels_encoder[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"speed\", data->front_wheels_encoder[i].value.speed);\n\tBSON_APPEND_DOUBLE(&children[2], \"speedms\", data->front_wheels_encoder[i].value.speedms);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"distance\", &children[0]);\nfor (int i = 0; i < (data->distance_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->distance[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"meters\", data->distance[i].value.meters);\n\tBSON_APPEND_DOUBLE(&children[2], \"rotations\", data->distance[i].value.rotations);\n\tBSON_APPEND_DOUBLE(&children[2], \"angle\", data->distance[i].value.angle);\n\tBSON_APPEND_DOUBLE(&children[2], \"clock_period\", data->distance[i].value.clock_period);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"throttle\", &children[0]);\nfor (int i = 0; i < (data->throttle_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->throttle[i].timestamp);\n\tBSON_APPEND_DOUBLE(&children[1], \"value\", data->throttle[i].value);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"brake\", &children[0]);\nfor (int i = 0; i < (data->brake_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->brake[i].timestamp);\n\tBSON_APPEND_DOUBLE(&children[1], \"value\", data->brake[i].value);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"steering_wheel\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"encoder\", &children[1]);\nfor (int i = 0; i < (data->steering_wheel.encoder_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->steering_wheel.encoder[i].timestamp);\n\tBSON_APPEND_DOUBLE(&children[2], \"value\", data->steering_wheel.encoder[i].value);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"gears\", &children[1]);\nfor (int i = 0; i < (data->steering_wheel.gears_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->steering_wheel.gears[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_INT32(&children[3], \"control\", data->steering_wheel.gears[i].value.control);\n\tBSON_APPEND_INT32(&children[3], \"cooling\", data->steering_wheel.gears[i].value.cooling);\n\tBSON_APPEND_INT32(&children[3], \"map\", data->steering_wheel.gears[i].value.map);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_INT32(&children[0], \"marker\", data->steering_wheel.marker);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\n","{{GENERATE_CONFIG_ALLOCATOR}}":"config->a = strdup(\"ciao\");\nconfig->b = 23;\nconfig->d = 23.23;\nconfig->arr_count = 2;\nconfig->arr = (char**) malloc(sizeof(char*) * config->arr_count);\nconfig->arr[0] = strdup(\"asdf\");\nconfig->arr[1] = strdup(\"asdf\");\nconfig->arrr_count = 2;\nconfig->arrr = (int*) malloc(sizeof(int) * config->arrr_count);\nconfig->arrr[0] = 2;\nconfig->arrr[1] = 3;\nconfig->arrrr_count = 1;\nconfig->arrrr = (double*) malloc(sizeof(double) * config->arrrr_count);\nconfig->arrrr[0] = 2.3;\nconfig->obj1.a = strdup(\"ciao\");\nconfig->obj1.b = 23;\nconfig->obj1.d = 23.23;\nconfig->obj1.arr_count = 2;\nconfig->obj1.arr = (char**) malloc(sizeof(char*) * config->obj1.arr_count);\nconfig->obj1.arr[0] = strdup(\"asdf\");\nconfig->obj1.arr[1] = strdup(\"asdf\");\nconfig->obj1.arrr_count = 2;\nconfig->obj1.arrr = (int*) malloc(sizeof(int) * config->obj1.arrr_count);\nconfig->obj1.arrr[0] = 2;\nconfig->obj1.arrr[1] = 3;\nconfig->obj1.arrrr_count = 1;\nconfig->obj1.arrrr = (double*) malloc(sizeof(double) * config->obj1.arrrr_count);\nconfig->obj1.arrrr[0] = 2.3;\nconfig->obj2.a = strdup(\"ciao\");\nconfig->obj2.b = 23;\nconfig->obj2.d = 23.23;\nconfig->obj2.arr_count = 2;\nconfig->obj2.arr = (char**) malloc(sizeof(char*) * config->obj2.arr_count);\nconfig->obj2.arr[0] = strdup(\"asdf\");\nconfig->obj2.arr[1] = strdup(\"asdf\");\nconfig->obj2.arrr_count = 2;\nconfig->obj2.arrr = (int*) malloc(sizeof(int) * config->obj2.arrr_count);\nconfig->obj2.arrr[0] = 2;\nconfig->obj2.arrr[1] = 3;\nconfig->obj2.arrrr_count = 1;\nconfig->obj2.arrrr = (double*) malloc(sizeof(double) * config->obj2.arrrr_count);\nconfig->obj2.arrrr[0] = 2.3;\n","{{GENERATE_CONFIG_DEALLOCATOR}}":"free(config->a);\nfreeStringsArray(config->arr, &config->arr_count);\nfree(config->arrr);\nfree(config->arrrr);\nfree(config->obj1.a);\nfreeStringsArray(config->obj1.arr, &config->obj1.arr_count);\nfree(config->obj1.arrr);\nfree(config->obj1.arrrr);\nfree(config->obj2.a);\nfreeStringsArray(config->obj2.arr, &config->obj2.arr_count);\nfree(config->obj2.arrr);\nfree(config->obj2.arrrr);\n","{{GENERATE_CONFIG_PARSER}}":"static void parseObj1Object(const jsmntok_t *json_tokens, const char *json_string, config_t *config, int *i) {\n\t++(*i);\n\tint size = json_tokens[*i].size;\n\tfor (int j = 0; j < size; ++j) {\n\t\t++(*i);\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\tif (strcmp(key, \"a\") == 0) {\n\t\t\tfree(config->obj1.a);\n\t\t\tconfig->obj1.a = getStringValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"b\") == 0) {\n\t\t\tconfig->obj1.b = getIntValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"d\") == 0) {\n\t\t\tconfig->obj1.d = getDoubleValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"arr\") == 0) {\n\t\t\tfreeStringsArray(config->obj1.arr, &config->obj1.arr_count);\n\t\t\tconfig->obj1.arr = getStringArrayValue(json_tokens, json_string, &config->obj1.arr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrr\") == 0) {\n\t\t\tfree(config->obj1.arrr);\n\t\t\tconfig->obj1.arrr = getIntArrayValue(json_tokens, json_string, &config->obj1.arrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrrr\") == 0) {\n\t\t\tfree(config->obj1.arrrr);\n\t\t\tconfig->obj1.arrrr = getDoubleArrayValue(json_tokens, json_string, &config->obj1.arrrr_count, i);\n\t\t}\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic void parseObj2Object(const jsmntok_t *json_tokens, const char *json_string, config_t *config, int *i) {\n\t++(*i);\n\tint size = json_tokens[*i].size;\n\tfor (int j = 0; j < size; ++j) {\n\t\t++(*i);\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\tif (strcmp(key, \"a\") == 0) {\n\t\t\tfree(config->obj2.a);\n\t\t\tconfig->obj2.a = getStringValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"b\") == 0) {\n\t\t\tconfig->obj2.b = getIntValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"d\") == 0) {\n\t\t\tconfig->obj2.d = getDoubleValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"arr\") == 0) {\n\t\t\tfreeStringsArray(config->obj2.arr, &config->obj2.arr_count);\n\t\t\tconfig->obj2.arr = getStringArrayValue(json_tokens, json_string, &config->obj2.arr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrr\") == 0) {\n\t\t\tfree(config->obj2.arrr);\n\t\t\tconfig->obj2.arrr = getIntArrayValue(json_tokens, json_string, &config->obj2.arrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrrr\") == 0) {\n\t\t\tfree(config->obj2.arrrr);\n\t\t\tconfig->obj2.arrrr = getDoubleArrayValue(json_tokens, json_string, &config->obj2.arrrr_count, i);\n\t\t}\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic void parseJsonTokens(const jsmntok_t *json_tokens, int tokens_length, const char *json_string, config_t *config) {\n\tint _i, *i = &_i;\n\tfor (*i = 1; *i < tokens_length; ++(*i)) {\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\tif (strcmp(key, \"a\") == 0) {\n\t\t\tfree(config->a);\n\t\t\tconfig->a = getStringValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"b\") == 0) {\n\t\t\tconfig->b = getIntValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"d\") == 0) {\n\t\t\tconfig->d = getDoubleValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"arr\") == 0) {\n\t\t\tfreeStringsArray(config->arr, &config->arr_count);\n\t\t\tconfig->arr = getStringArrayValue(json_tokens, json_string, &config->arr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrr\") == 0) {\n\t\t\tfree(config->arrr);\n\t\t\tconfig->arrr = getIntArrayValue(json_tokens, json_string, &config->arrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrrr\") == 0) {\n\t\t\tfree(config->arrrr);\n\t\t\tconfig->arrrr = getDoubleArrayValue(json_tokens, json_string, &config->arrrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"obj1\") == 0) {\n\t\t\tparseObj1Object(json_tokens, json_string, config, i);\n\t\t}\n\t\telse if (strcmp(key, \"obj2\") == 0) {\n\t\t\tparseObj2Object(json_tokens, json_string, config, i);\n\t\t}\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n","{{GENERATE_CONFIG_PRINT}}":"printf(\"config->a:\\t%s\\n\", config->a);\nprintf(\"config->b:\\t%d\\n\", config->b);\nprintf(\"config->d:\\t%f\\n\", config->d);\nprintf(\"config->arr: \");\nprintStringsArray(config->arr, config->arr_count);\nprintf(\"config->arrr: \");\nprintIntArray(config->arrr);\nprintf(\"config->arrrr: \");\nprintDoubleArray(config->arrrr);\nprintf(\"config->obj1.a:\\t%s\\n\", config->obj1.a);\nprintf(\"config->obj1.b:\\t%d\\n\", config->obj1.b);\nprintf(\"config->obj1.d:\\t%f\\n\", config->obj1.d);\nprintf(\"config->obj1.arr: \");\nprintStringsArray(config->obj1.arr, config->obj1.arr_count);\nprintf(\"config->obj1.arrr: \");\nprintIntArray(config->obj1.arrr);\nprintf(\"config->obj1.arrrr: \");\nprintDoubleArray(config->obj1.arrrr);\nprintf(\"config->obj2.a:\\t%s\\n\", config->obj2.a);\nprintf(\"config->obj2.b:\\t%d\\n\", config->obj2.b);\nprintf(\"config->obj2.d:\\t%f\\n\", config->obj2.d);\nprintf(\"config->obj2.arr: \");\nprintStringsArray(config->obj2.arr, config->obj2.arr_count);\nprintf(\"config->obj2.arrr: \");\nprintIntArray(config->obj2.arrr);\nprintf(\"config->obj2.arrrr: \");\nprintDoubleArray(config->obj2.arrrr);\n","{{GENERATE_CONFIG_TYPE}}":"typedef struct {\n\tchar* a;\n\tint b;\n\tdouble d;\n\tchar** arr;\n\tint arr_count;\n\tint* arrr;\n\tint arrr_count;\n\tdouble* arrrr;\n\tint arrrr_count;\n} obj1_config_t;\n\ntypedef struct {\n\tchar* a;\n\tint b;\n\tdouble d;\n\tchar** arr;\n\tint arr_count;\n\tint* arrr;\n\tint arrr_count;\n\tdouble* arrrr;\n\tint arrrr_count;\n} obj2_config_t;\n\ntypedef struct {\n\tchar* a;\n\tint b;\n\tdouble d;\n\tchar** arr;\n\tint arr_count;\n\tint* arrr;\n\tint arrr_count;\n\tdouble* arrrr;\n\tint arrrr_count;\n\tobj1_config_t obj1;\n\tobj2_config_t obj2;\n} config_t;\n","{{GENERATE_STRUCTURE_ALLOCATOR}}":"data->inverters.right.speed_size = 500;\ndata->inverters.right.speed = (inverters_right_speed_data*) malloc(sizeof(inverters_right_speed_data) * data->inverters.right.speed_size);\ndata->inverters.right.speed_count = 0;\ndata->inverters.right.temperature_igbt_size = 500;\ndata->inverters.right.temperature_igbt = (inverters_right_temperature_igbt_data*) malloc(sizeof(inverters_right_temperature_igbt_data) * data->inverters.right.temperature_igbt_size);\ndata->inverters.right.temperature_igbt_count = 0;\ndata->inverters.right.temperature_motors_size = 500;\ndata->inverters.right.temperature_motors = (inverters_right_temperature_motors_data*) malloc(sizeof(inverters_right_temperature_motors_data) * data->inverters.right.temperature_motors_size);\ndata->inverters.right.temperature_motors_count = 0;\ndata->inverters.left.speed_size = 500;\ndata->inverters.left.speed = (inverters_left_speed_data*) malloc(sizeof(inverters_left_speed_data) * data->inverters.left.speed_size);\ndata->inverters.left.speed_count = 0;\ndata->inverters.left.temperature_igbt_size = 500;\ndata->inverters.left.temperature_igbt = (inverters_left_temperature_igbt_data*) malloc(sizeof(inverters_left_temperature_igbt_data) * data->inverters.left.temperature_igbt_size);\ndata->inverters.left.temperature_igbt_count = 0;\ndata->inverters.left.temperature_motors_size = 500;\ndata->inverters.left.temperature_motors = (inverters_left_temperature_motors_data*) malloc(sizeof(inverters_left_temperature_motors_data) * data->inverters.left.temperature_motors_size);\ndata->inverters.left.temperature_motors_count = 0;\ndata->bms_hv.temperature_size = 500;\ndata->bms_hv.temperature = (bms_hv_temperature_data*) malloc(sizeof(bms_hv_temperature_data) * data->bms_hv.temperature_size);\ndata->bms_hv.temperature_count = 0;\ndata->bms_hv.voltage_size = 500;\ndata->bms_hv.voltage = (bms_hv_voltage_data*) malloc(sizeof(bms_hv_voltage_data) * data->bms_hv.voltage_size);\ndata->bms_hv.voltage_count = 0;\ndata->bms_hv.current_size = 500;\ndata->bms_hv.current = (bms_hv_current_data*) malloc(sizeof(bms_hv_current_data) * data->bms_hv.current_size);\ndata->bms_hv.current_count = 0;\ndata->bms_hv.errors_size = 500;\ndata->bms_hv.errors = (bms_hv_errors_data*) malloc(sizeof(bms_hv_errors_data) * data->bms_hv.errors_size);\ndata->bms_hv.errors_count = 0;\ndata->bms_hv.warnings_size = 500;\ndata->bms_hv.warnings = (bms_hv_warnings_data*) malloc(sizeof(bms_hv_warnings_data) * data->bms_hv.warnings_size);\ndata->bms_hv.warnings_count = 0;\ndata->bms_lv.values_size = 500;\ndata->bms_lv.values = (bms_lv_values_data*) malloc(sizeof(bms_lv_values_data) * data->bms_lv.values_size);\ndata->bms_lv.values_count = 0;\ndata->bms_lv.errors_size = 500;\ndata->bms_lv.errors = (bms_lv_errors_data*) malloc(sizeof(bms_lv_errors_data) * data->bms_lv.errors_size);\ndata->bms_lv.errors_count = 0;\ndata->gps.new_size = 500;\ndata->gps.new = (gps_new_data*) malloc(sizeof(gps_new_data) * data->gps.new_size);\ndata->gps.new_count = 0;\ndata->gps.old.location_size = 500;\ndata->gps.old.location = (gps_old_location_data*) malloc(sizeof(gps_old_location_data) * data->gps.old.location_size);\ndata->gps.old.location_count = 0;\ndata->gps.old.time_size = 500;\ndata->gps.old.time = (gps_old_time_data*) malloc(sizeof(gps_old_time_data) * data->gps.old.time_size);\ndata->gps.old.time_count = 0;\ndata->gps.old.true_track_mode_size = 500;\ndata->gps.old.true_track_mode = (gps_old_true_track_mode_data*) malloc(sizeof(gps_old_true_track_mode_data) * data->gps.old.true_track_mode_size);\ndata->gps.old.true_track_mode_count = 0;\ndata->imu_gyro_size = 500;\ndata->imu_gyro = (imu_gyro_data*) malloc(sizeof(imu_gyro_data) * data->imu_gyro_size);\ndata->imu_gyro_count = 0;\ndata->imu_accel_size = 500;\ndata->imu_accel = (imu_accel_data*) malloc(sizeof(imu_accel_data) * data->imu_accel_size);\ndata->imu_accel_count = 0;\ndata->front_wheels_encoder_size = 500;\ndata->front_wheels_encoder = (front_wheels_encoder_data*) malloc(sizeof(front_wheels_encoder_data) * data->front_wheels_encoder_size);\ndata->front_wheels_encoder_count = 0;\ndata->distance_size = 500;\ndata->distance = (distance_data*) malloc(sizeof(distance_data) * data->distance_size);\ndata->distance_count = 0;\ndata->throttle_size = 500;\ndata->throttle = (throttle_data*) malloc(sizeof(throttle_data) * data->throttle_size);\ndata->throttle_count = 0;\ndata->brake_size = 500;\ndata->brake = (brake_data*) malloc(sizeof(brake_data) * data->brake_size);\ndata->brake_count = 0;\ndata->steering_wheel.encoder_size = 500;\ndata->steering_wheel.encoder = (steering_wheel_encoder_data*) malloc(sizeof(steering_wheel_encoder_data) * data->steering_wheel.encoder_size);\ndata->steering_wheel.encoder_count = 0;\ndata->steering_wheel.gears_size = 500;\ndata->steering_wheel.gears = (steering_wheel_gears_data*) malloc(sizeof(steering_wheel_gears_data) * data->steering_wheel.gears_size);\ndata->steering_wheel.gears_count = 0;\n","{{GENERATE_STRUCTURE_DEALLOCATOR}}":"free(data->inverters.right.speed);\nfree(data->inverters.right.temperature_igbt);\nfree(data->inverters.right.temperature_motors);\nfree(data->inverters.left.speed);\nfree(data->inverters.left.temperature_igbt);\nfree(data->inverters.left.temperature_motors);\nfree(data->bms_hv.temperature);\nfree(data->bms_hv.voltage);\nfree(data->bms_hv.current);\nfree(data->bms_hv.errors);\nfree(data->bms_hv.warnings);\nfree(data->bms_lv.values);\nfree(data->bms_lv.errors);\nfree(data->gps.new);\nfree(data->gps.old.location);\nfree(data->gps.old.time);\nfree(data->gps.old.true_track_mode);\nfree(data->imu_gyro);\nfree(data->imu_accel);\nfree(data->front_wheels_encoder);\nfree(data->distance);\nfree(data->throttle);\nfree(data->brake);\nfree(data->steering_wheel.encoder);\nfree(data->steering_wheel.gears);\nfree(data);\n","{{GENERATE_STRUCTURE_TYPE}}":"typedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_right_speed_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_right_temperature_igbt_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_right_temperature_motors_data;\n\ntypedef struct {\n\tinverters_right_speed_data *speed;\n\tint speed_count;\n\tint speed_size;\n\tinverters_right_temperature_igbt_data *temperature_igbt;\n\tint temperature_igbt_count;\n\tint temperature_igbt_size;\n\tinverters_right_temperature_motors_data *temperature_motors;\n\tint temperature_motors_count;\n\tint temperature_motors_size;\n} inverters_right_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_left_speed_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_left_temperature_igbt_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_left_temperature_motors_data;\n\ntypedef struct {\n\tinverters_left_speed_data *speed;\n\tint speed_count;\n\tint speed_size;\n\tinverters_left_temperature_igbt_data *temperature_igbt;\n\tint temperature_igbt_count;\n\tint temperature_igbt_size;\n\tinverters_left_temperature_motors_data *temperature_motors;\n\tint temperature_motors_count;\n\tint temperature_motors_size;\n} inverters_left_data;\n\ntypedef struct {\n\tinverters_right_data right;\n\tinverters_left_data left;\n} inverters_data;\n\ntypedef struct {\n\tdouble max;\n\tdouble min;\n\tdouble average;\n} bms_hv_temperature_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_temperature_value_data value;\n} bms_hv_temperature_data;\n\ntypedef struct {\n\tdouble max;\n\tdouble min;\n\tdouble total;\n} bms_hv_voltage_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_voltage_value_data value;\n} bms_hv_voltage_data;\n\ntypedef struct {\n\tdouble current;\n\tdouble pow;\n} bms_hv_current_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_current_value_data value;\n} bms_hv_current_data;\n\ntypedef struct {\n\tint fault_id;\n\tint fault_index;\n} bms_hv_errors_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_errors_value_data value;\n} bms_hv_errors_data;\n\ntypedef struct {\n\tint fault_id;\n\tint fault_index;\n} bms_hv_warnings_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_warnings_value_data value;\n} bms_hv_warnings_data;\n\ntypedef struct {\n\tbms_hv_temperature_data *temperature;\n\tint temperature_count;\n\tint temperature_size;\n\tbms_hv_voltage_data *voltage;\n\tint voltage_count;\n\tint voltage_size;\n\tbms_hv_current_data *current;\n\tint current_count;\n\tint current_size;\n\tbms_hv_errors_data *errors;\n\tint errors_count;\n\tint errors_size;\n\tbms_hv_warnings_data *warnings;\n\tint warnings_count;\n\tint warnings_size;\n} bms_hv_data;\n\ntypedef struct {\n\tdouble voltage;\n\tdouble temperature;\n} bms_lv_values_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_lv_values_value_data value;\n} bms_lv_values_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} bms_lv_errors_data;\n\ntypedef struct {\n\tbms_lv_values_data *values;\n\tint values_count;\n\tint values_size;\n\tbms_lv_errors_data *errors;\n\tint errors_count;\n\tint errors_size;\n} bms_lv_data;\n\ntypedef struct {\n\tdouble latitude_GGA_safe;\n\tdouble longitude_GGA_safe;\n\tdouble latitude_GGA;\n\tdouble longitude_GGA;\n\tdouble altitude_GGA;\n\tchar* ns_indicator_GGA;\n\tchar* ew_indicator_GGA;\n\tchar* utc_time_GGA;\n\tdouble latitude_GLL;\n\tdouble longitude_GLL;\n\tchar* ns_indicator_GLL;\n\tchar* ew_indicator_GLL;\n\tchar* utc_time_GLL;\n\tdouble ground_speed_knots_VTG;\n\tdouble ground_speed_human_VTG;\n\tdouble latitude_RMC;\n\tdouble longitude_RMC;\n\tchar* ns_indicator_RMC;\n\tchar* ew_indicator_RMC;\n\tchar* utc_time_RMC;\n\tchar* date_RMC;\n\tdouble ground_speed_knots_RMC;\n} gps_new_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tgps_new_value_data value;\n} gps_new_data;\n\ntypedef struct {\n\tdouble latitude_m;\n\tint latitude_o;\n\tdouble longitude_m;\n\tint longitude_o;\n\tdouble speed;\n\tdouble altitude;\n} gps_old_location_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tgps_old_location_value_data value;\n} gps_old_location_data;\n\ntypedef struct {\n\tint hours;\n\tint minutes;\n\tint seconds;\n} gps_old_time_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tgps_old_time_value_data value;\n} gps_old_time_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} gps_old_true_track_mode_data;\n\ntypedef struct {\n\tgps_old_location_data *location;\n\tint location_count;\n\tint location_size;\n\tgps_old_time_data *time;\n\tint time_count;\n\tint time_size;\n\tgps_old_true_track_mode_data *true_track_mode;\n\tint true_track_mode_count;\n\tint true_track_mode_size;\n} gps_old_data;\n\ntypedef struct {\n\tgps_new_data *new;\n\tint new_count;\n\tint new_size;\n\tgps_old_data old;\n} gps_data;\n\ntypedef struct {\n\tdouble x;\n\tdouble y;\n\tdouble z;\n\tdouble scale;\n} imu_gyro_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\timu_gyro_value_data value;\n} imu_gyro_data;\n\ntypedef struct {\n\tdouble x;\n\tdouble y;\n\tdouble z;\n\tdouble scale;\n} imu_accel_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\timu_accel_value_data value;\n} imu_accel_data;\n\ntypedef struct {\n\tdouble speed;\n\tdouble speedms;\n} front_wheels_encoder_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tfront_wheels_encoder_value_data value;\n} front_wheels_encoder_data;\n\ntypedef struct {\n\tdouble meters;\n\tdouble rotations;\n\tdouble angle;\n\tdouble clock_period;\n} distance_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdistance_value_data value;\n} distance_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdouble value;\n} throttle_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdouble value;\n} brake_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdouble value;\n} steering_wheel_encoder_data;\n\ntypedef struct {\n\tint control;\n\tint cooling;\n\tint map;\n} steering_wheel_gears_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tsteering_wheel_gears_value_data value;\n} steering_wheel_gears_data;\n\ntypedef struct {\n\tsteering_wheel_encoder_data *encoder;\n\tint encoder_count;\n\tint encoder_size;\n\tsteering_wheel_gears_data *gears;\n\tint gears_count;\n\tint gears_size;\n\tint marker;\n} steering_wheel_data;\n\ntypedef struct {\n\tint id;\n\tlong timestamp;\n\tchar* sessionName;\n\tinverters_data inverters;\n\tbms_hv_data bms_hv;\n\tbms_lv_data bms_lv;\n\tgps_data gps;\n\timu_gyro_data *imu_gyro;\n\tint imu_gyro_count;\n\tint imu_gyro_size;\n\timu_accel_data *imu_accel;\n\tint imu_accel_count;\n\tint imu_accel_size;\n\tfront_wheels_encoder_data *front_wheels_encoder;\n\tint front_wheels_encoder_count;\n\tint front_wheels_encoder_size;\n\tdistance_data *distance;\n\tint distance_count;\n\tint distance_size;\n\tthrottle_data *throttle;\n\tint throttle_count;\n\tint throttle_size;\n\tbrake_data *brake;\n\tint brake_count;\n\tint brake_size;\n\tsteering_wheel_data steering_wheel;\n} data_t;\n"},"/home/toscan/dev/eagletrt-code-generator/test/test-assets/generate/test2":{"{{GENERATE_BSON}}":"*bson_document = bson_new();\nbson_t *children = (bson_t*)malloc(sizeof(bson_t) * 5);\nBSON_APPEND_INT32(*bson_document, \"id\", data->id);\nBSON_APPEND_INT64(*bson_document, \"timestamp\", data->timestamp);\nBSON_APPEND_UTF8(*bson_document, \"sessionName\", data->sessionName);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"inverters\", &children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"right\", &children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"speed\", &children[2]);\nfor (int i = 0; i < (data->inverters.right.speed_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.right.speed[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.right.speed[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_igbt\", &children[2]);\nfor (int i = 0; i < (data->inverters.right.temperature_igbt_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.right.temperature_igbt[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.right.temperature_igbt[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_motors\", &children[2]);\nfor (int i = 0; i < (data->inverters.right.temperature_motors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.right.temperature_motors[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.right.temperature_motors[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nbson_append_document_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"left\", &children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"speed\", &children[2]);\nfor (int i = 0; i < (data->inverters.left.speed_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.left.speed[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.left.speed[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_igbt\", &children[2]);\nfor (int i = 0; i < (data->inverters.left.temperature_igbt_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.left.temperature_igbt[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.left.temperature_igbt[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"temperature_motors\", &children[2]);\nfor (int i = 0; i < (data->inverters.left.temperature_motors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->inverters.left.temperature_motors[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->inverters.left.temperature_motors[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nbson_append_document_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"bms_hv\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"temperature\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.temperature_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.temperature[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"max\", data->bms_hv.temperature[i].value.max);\n\tBSON_APPEND_DOUBLE(&children[3], \"min\", data->bms_hv.temperature[i].value.min);\n\tBSON_APPEND_DOUBLE(&children[3], \"average\", data->bms_hv.temperature[i].value.average);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"voltage\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.voltage_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.voltage[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"max\", data->bms_hv.voltage[i].value.max);\n\tBSON_APPEND_DOUBLE(&children[3], \"min\", data->bms_hv.voltage[i].value.min);\n\tBSON_APPEND_DOUBLE(&children[3], \"total\", data->bms_hv.voltage[i].value.total);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"current\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.current_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.current[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"current\", data->bms_hv.current[i].value.current);\n\tBSON_APPEND_DOUBLE(&children[3], \"pow\", data->bms_hv.current[i].value.pow);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"errors\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.errors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.errors[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_INT32(&children[3], \"fault_id\", data->bms_hv.errors[i].value.fault_id);\n\tBSON_APPEND_INT32(&children[3], \"fault_index\", data->bms_hv.errors[i].value.fault_index);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"warnings\", &children[1]);\nfor (int i = 0; i < (data->bms_hv.warnings_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_hv.warnings[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_INT32(&children[3], \"fault_id\", data->bms_hv.warnings[i].value.fault_id);\n\tBSON_APPEND_INT32(&children[3], \"fault_index\", data->bms_hv.warnings[i].value.fault_index);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"bms_lv\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"values\", &children[1]);\nfor (int i = 0; i < (data->bms_lv.values_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_lv.values[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"voltage\", data->bms_lv.values[i].value.voltage);\n\tBSON_APPEND_DOUBLE(&children[3], \"temperature\", data->bms_lv.values[i].value.temperature);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"errors\", &children[1]);\nfor (int i = 0; i < (data->bms_lv.errors_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->bms_lv.errors[i].timestamp);\n\tBSON_APPEND_INT32(&children[2], \"value\", data->bms_lv.errors[i].value);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"gps\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"new\", &children[1]);\nfor (int i = 0; i < (data->gps.new_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->gps.new[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_GGA_safe\", data->gps.new[i].value.latitude_GGA_safe);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_GGA_safe\", data->gps.new[i].value.longitude_GGA_safe);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_GGA\", data->gps.new[i].value.latitude_GGA);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_GGA\", data->gps.new[i].value.longitude_GGA);\n\tBSON_APPEND_DOUBLE(&children[3], \"altitude_GGA\", data->gps.new[i].value.altitude_GGA);\n\tBSON_APPEND_UTF8(&children[3], \"ns_indicator_GGA\", data->gps.new[i].value.ns_indicator_GGA);\n\tBSON_APPEND_UTF8(&children[3], \"ew_indicator_GGA\", data->gps.new[i].value.ew_indicator_GGA);\n\tBSON_APPEND_UTF8(&children[3], \"utc_time_GGA\", data->gps.new[i].value.utc_time_GGA);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_GLL\", data->gps.new[i].value.latitude_GLL);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_GLL\", data->gps.new[i].value.longitude_GLL);\n\tBSON_APPEND_UTF8(&children[3], \"ns_indicator_GLL\", data->gps.new[i].value.ns_indicator_GLL);\n\tBSON_APPEND_UTF8(&children[3], \"ew_indicator_GLL\", data->gps.new[i].value.ew_indicator_GLL);\n\tBSON_APPEND_UTF8(&children[3], \"utc_time_GLL\", data->gps.new[i].value.utc_time_GLL);\n\tBSON_APPEND_DOUBLE(&children[3], \"ground_speed_knots_VTG\", data->gps.new[i].value.ground_speed_knots_VTG);\n\tBSON_APPEND_DOUBLE(&children[3], \"ground_speed_human_VTG\", data->gps.new[i].value.ground_speed_human_VTG);\n\tBSON_APPEND_DOUBLE(&children[3], \"latitude_RMC\", data->gps.new[i].value.latitude_RMC);\n\tBSON_APPEND_DOUBLE(&children[3], \"longitude_RMC\", data->gps.new[i].value.longitude_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"ns_indicator_RMC\", data->gps.new[i].value.ns_indicator_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"ew_indicator_RMC\", data->gps.new[i].value.ew_indicator_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"utc_time_RMC\", data->gps.new[i].value.utc_time_RMC);\n\tBSON_APPEND_UTF8(&children[3], \"date_RMC\", data->gps.new[i].value.date_RMC);\n\tBSON_APPEND_DOUBLE(&children[3], \"ground_speed_knots_RMC\", data->gps.new[i].value.ground_speed_knots_RMC);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"old\", &children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"location\", &children[2]);\nfor (int i = 0; i < (data->gps.old.location_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->gps.old.location[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[3], \"value\", &children[4]);\n\tBSON_APPEND_DOUBLE(&children[4], \"latitude_m\", data->gps.old.location[i].value.latitude_m);\n\tBSON_APPEND_INT32(&children[4], \"latitude_o\", data->gps.old.location[i].value.latitude_o);\n\tBSON_APPEND_DOUBLE(&children[4], \"longitude_m\", data->gps.old.location[i].value.longitude_m);\n\tBSON_APPEND_INT32(&children[4], \"longitude_o\", data->gps.old.location[i].value.longitude_o);\n\tBSON_APPEND_DOUBLE(&children[4], \"speed\", data->gps.old.location[i].value.speed);\n\tBSON_APPEND_DOUBLE(&children[4], \"altitude\", data->gps.old.location[i].value.altitude);\n\tbson_append_document_end(&children[3], &children[4]);\n\tbson_destroy(&children[4]);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"time\", &children[2]);\nfor (int i = 0; i < (data->gps.old.time_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->gps.old.time[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[3], \"value\", &children[4]);\n\tBSON_APPEND_INT32(&children[4], \"hours\", data->gps.old.time[i].value.hours);\n\tBSON_APPEND_INT32(&children[4], \"minutes\", data->gps.old.time[i].value.minutes);\n\tBSON_APPEND_INT32(&children[4], \"seconds\", data->gps.old.time[i].value.seconds);\n\tbson_append_document_end(&children[3], &children[4]);\n\tbson_destroy(&children[4]);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nBSON_APPEND_ARRAY_BEGIN(&children[1], \"true_track_mode\", &children[2]);\nfor (int i = 0; i < (data->gps.old.true_track_mode_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"0\", &children[3]);\n\tBSON_APPEND_INT64(&children[3], \"timestamp\", data->gps.old.true_track_mode[i].timestamp);\n\tBSON_APPEND_INT32(&children[3], \"value\", data->gps.old.true_track_mode[i].value);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n}\nbson_append_array_end(&children[1], &children[2]);\nbson_destroy(&children[2]);\nbson_append_document_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"imu_gyro\", &children[0]);\nfor (int i = 0; i < (data->imu_gyro_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->imu_gyro[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"x\", data->imu_gyro[i].value.x);\n\tBSON_APPEND_DOUBLE(&children[2], \"y\", data->imu_gyro[i].value.y);\n\tBSON_APPEND_DOUBLE(&children[2], \"z\", data->imu_gyro[i].value.z);\n\tBSON_APPEND_DOUBLE(&children[2], \"scale\", data->imu_gyro[i].value.scale);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"imu_accel\", &children[0]);\nfor (int i = 0; i < (data->imu_accel_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->imu_accel[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"x\", data->imu_accel[i].value.x);\n\tBSON_APPEND_DOUBLE(&children[2], \"y\", data->imu_accel[i].value.y);\n\tBSON_APPEND_DOUBLE(&children[2], \"z\", data->imu_accel[i].value.z);\n\tBSON_APPEND_DOUBLE(&children[2], \"scale\", data->imu_accel[i].value.scale);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"front_wheels_encoder\", &children[0]);\nfor (int i = 0; i < (data->front_wheels_encoder_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->front_wheels_encoder[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"speed\", data->front_wheels_encoder[i].value.speed);\n\tBSON_APPEND_DOUBLE(&children[2], \"speedms\", data->front_wheels_encoder[i].value.speedms);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"distance\", &children[0]);\nfor (int i = 0; i < (data->distance_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->distance[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"value\", &children[2]);\n\tBSON_APPEND_DOUBLE(&children[2], \"meters\", data->distance[i].value.meters);\n\tBSON_APPEND_DOUBLE(&children[2], \"rotations\", data->distance[i].value.rotations);\n\tBSON_APPEND_DOUBLE(&children[2], \"angle\", data->distance[i].value.angle);\n\tBSON_APPEND_DOUBLE(&children[2], \"clock_period\", data->distance[i].value.clock_period);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"throttle\", &children[0]);\nfor (int i = 0; i < (data->throttle_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->throttle[i].timestamp);\n\tBSON_APPEND_DOUBLE(&children[1], \"value\", data->throttle[i].value);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_ARRAY_BEGIN(*bson_document, \"brake\", &children[0]);\nfor (int i = 0; i < (data->brake_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[0], \"0\", &children[1]);\n\tBSON_APPEND_INT64(&children[1], \"timestamp\", data->brake[i].timestamp);\n\tBSON_APPEND_DOUBLE(&children[1], \"value\", data->brake[i].value);\n\tbson_append_document_end(&children[0], &children[1]);\n\tbson_destroy(&children[1]);\n}\nbson_append_array_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\nBSON_APPEND_DOCUMENT_BEGIN(*bson_document, \"steering_wheel\", &children[0]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"encoder\", &children[1]);\nfor (int i = 0; i < (data->steering_wheel.encoder_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->steering_wheel.encoder[i].timestamp);\n\tBSON_APPEND_DOUBLE(&children[2], \"value\", data->steering_wheel.encoder[i].value);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_ARRAY_BEGIN(&children[0], \"gears\", &children[1]);\nfor (int i = 0; i < (data->steering_wheel.gears_count); i++)\n{\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[1], \"0\", &children[2]);\n\tBSON_APPEND_INT64(&children[2], \"timestamp\", data->steering_wheel.gears[i].timestamp);\n\tBSON_APPEND_DOCUMENT_BEGIN(&children[2], \"value\", &children[3]);\n\tBSON_APPEND_INT32(&children[3], \"control\", data->steering_wheel.gears[i].value.control);\n\tBSON_APPEND_INT32(&children[3], \"cooling\", data->steering_wheel.gears[i].value.cooling);\n\tBSON_APPEND_INT32(&children[3], \"map\", data->steering_wheel.gears[i].value.map);\n\tbson_append_document_end(&children[2], &children[3]);\n\tbson_destroy(&children[3]);\n\tbson_append_document_end(&children[1], &children[2]);\n\tbson_destroy(&children[2]);\n}\nbson_append_array_end(&children[0], &children[1]);\nbson_destroy(&children[1]);\nBSON_APPEND_INT32(&children[0], \"marker\", data->steering_wheel.marker);\nbson_append_document_end(*bson_document, &children[0]);\nbson_destroy(&children[0]);\n","{{GENERATE_CONFIG_ALLOCATOR}}":"config->a = strdup(\"ciao\");\nconfig->b = 23;\nconfig->d = 23.23;\nconfig->arr_count = 2;\nconfig->arr = (char**) malloc(sizeof(char*) * config->arr_count);\nconfig->arr[0] = strdup(\"asdf\");\nconfig->arr[1] = strdup(\"asdf\");\nconfig->arrr_count = 2;\nconfig->arrr = (int*) malloc(sizeof(int) * config->arrr_count);\nconfig->arrr[0] = 2;\nconfig->arrr[1] = 3;\nconfig->arrrr_count = 1;\nconfig->arrrr = (double*) malloc(sizeof(double) * config->arrrr_count);\nconfig->arrrr[0] = 2.3;\nconfig->obj1.a = strdup(\"ciao\");\nconfig->obj1.b = 23;\nconfig->obj1.d = 23.23;\nconfig->obj1.arr_count = 2;\nconfig->obj1.arr = (char**) malloc(sizeof(char*) * config->obj1.arr_count);\nconfig->obj1.arr[0] = strdup(\"asdf\");\nconfig->obj1.arr[1] = strdup(\"asdf\");\nconfig->obj1.arrr_count = 2;\nconfig->obj1.arrr = (int*) malloc(sizeof(int) * config->obj1.arrr_count);\nconfig->obj1.arrr[0] = 2;\nconfig->obj1.arrr[1] = 3;\nconfig->obj1.arrrr_count = 1;\nconfig->obj1.arrrr = (double*) malloc(sizeof(double) * config->obj1.arrrr_count);\nconfig->obj1.arrrr[0] = 2.3;\nconfig->obj2.a = strdup(\"ciao\");\nconfig->obj2.b = 23;\nconfig->obj2.d = 23.23;\nconfig->obj2.arr_count = 2;\nconfig->obj2.arr = (char**) malloc(sizeof(char*) * config->obj2.arr_count);\nconfig->obj2.arr[0] = strdup(\"asdf\");\nconfig->obj2.arr[1] = strdup(\"asdf\");\nconfig->obj2.arrr_count = 2;\nconfig->obj2.arrr = (int*) malloc(sizeof(int) * config->obj2.arrr_count);\nconfig->obj2.arrr[0] = 2;\nconfig->obj2.arrr[1] = 3;\nconfig->obj2.arrrr_count = 1;\nconfig->obj2.arrrr = (double*) malloc(sizeof(double) * config->obj2.arrrr_count);\nconfig->obj2.arrrr[0] = 2.3;\n","{{GENERATE_CONFIG_DEALLOCATOR}}":"free(config->a);\nfreeStringsArray(config->arr, &config->arr_count);\nfree(config->arrr);\nfree(config->arrrr);\nfree(config->obj1.a);\nfreeStringsArray(config->obj1.arr, &config->obj1.arr_count);\nfree(config->obj1.arrr);\nfree(config->obj1.arrrr);\nfree(config->obj2.a);\nfreeStringsArray(config->obj2.arr, &config->obj2.arr_count);\nfree(config->obj2.arrr);\nfree(config->obj2.arrrr);\n","{{GENERATE_CONFIG_PARSER}}":"static void parseObj1Object(const jsmntok_t *json_tokens, const char *json_string, config_t *config, int *i) {\n\t++(*i);\n\tint size = json_tokens[*i].size;\n\tfor (int j = 0; j < size; ++j) {\n\t\t++(*i);\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\tif (strcmp(key, \"a\") == 0) {\n\t\t\tfree(config->obj1.a);\n\t\t\tconfig->obj1.a = getStringValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"b\") == 0) {\n\t\t\tconfig->obj1.b = getIntValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"d\") == 0) {\n\t\t\tconfig->obj1.d = getDoubleValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"arr\") == 0) {\n\t\t\tfreeStringsArray(config->obj1.arr, &config->obj1.arr_count);\n\t\t\tconfig->obj1.arr = getStringArrayValue(json_tokens, json_string, &config->obj1.arr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrr\") == 0) {\n\t\t\tfree(config->obj1.arrr);\n\t\t\tconfig->obj1.arrr = getIntArrayValue(json_tokens, json_string, &config->obj1.arrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrrr\") == 0) {\n\t\t\tfree(config->obj1.arrrr);\n\t\t\tconfig->obj1.arrrr = getDoubleArrayValue(json_tokens, json_string, &config->obj1.arrrr_count, i);\n\t\t}\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic void parseObj2Object(const jsmntok_t *json_tokens, const char *json_string, config_t *config, int *i) {\n\t++(*i);\n\tint size = json_tokens[*i].size;\n\tfor (int j = 0; j < size; ++j) {\n\t\t++(*i);\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\tif (strcmp(key, \"a\") == 0) {\n\t\t\tfree(config->obj2.a);\n\t\t\tconfig->obj2.a = getStringValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"b\") == 0) {\n\t\t\tconfig->obj2.b = getIntValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"d\") == 0) {\n\t\t\tconfig->obj2.d = getDoubleValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"arr\") == 0) {\n\t\t\tfreeStringsArray(config->obj2.arr, &config->obj2.arr_count);\n\t\t\tconfig->obj2.arr = getStringArrayValue(json_tokens, json_string, &config->obj2.arr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrr\") == 0) {\n\t\t\tfree(config->obj2.arrr);\n\t\t\tconfig->obj2.arrr = getIntArrayValue(json_tokens, json_string, &config->obj2.arrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrrr\") == 0) {\n\t\t\tfree(config->obj2.arrrr);\n\t\t\tconfig->obj2.arrrr = getDoubleArrayValue(json_tokens, json_string, &config->obj2.arrrr_count, i);\n\t\t}\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic void parseJsonTokens(const jsmntok_t *json_tokens, int tokens_length, const char *json_string, config_t *config) {\n\tint _i, *i = &_i;\n\tfor (*i = 1; *i < tokens_length; ++(*i)) {\n\t\tchar* key = extractString(json_tokens[*i], json_string);\n\t\tif (strcmp(key, \"a\") == 0) {\n\t\t\tfree(config->a);\n\t\t\tconfig->a = getStringValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"b\") == 0) {\n\t\t\tconfig->b = getIntValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"d\") == 0) {\n\t\t\tconfig->d = getDoubleValue(json_tokens, json_string, i);\n\t\t}\n\t\telse if (strcmp(key, \"arr\") == 0) {\n\t\t\tfreeStringsArray(config->arr, &config->arr_count);\n\t\t\tconfig->arr = getStringArrayValue(json_tokens, json_string, &config->arr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrr\") == 0) {\n\t\t\tfree(config->arrr);\n\t\t\tconfig->arrr = getIntArrayValue(json_tokens, json_string, &config->arrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"arrrr\") == 0) {\n\t\t\tfree(config->arrrr);\n\t\t\tconfig->arrrr = getDoubleArrayValue(json_tokens, json_string, &config->arrrr_count, i);\n\t\t}\n\t\telse if (strcmp(key, \"obj1\") == 0) {\n\t\t\tparseObj1Object(json_tokens, json_string, config, i);\n\t\t}\n\t\telse if (strcmp(key, \"obj2\") == 0) {\n\t\t\tparseObj2Object(json_tokens, json_string, config, i);\n\t\t}\n\t\telse {\n\t\t\t++(*i);\n\t\t\tjsmntok_t token = json_tokens[*i];\n\t\t\tswitch (token.type)\n\t\t\t{\n\t\t\t\tcase JSMN_ARRAY:\n\t\t\t\t\t*i += token.size;\n\t\t\t\t\tbreak;\n\t\t\t\tcase JSMN_OBJECT:\n\t\t\t\t\t*i += 2 * token.size;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n","{{GENERATE_CONFIG_PRINT}}":"printf(\"config->a:\\t%s\\n\", config->a);\nprintf(\"config->b:\\t%d\\n\", config->b);\nprintf(\"config->d:\\t%f\\n\", config->d);\nprintf(\"config->arr: \");\nprintStringsArray(config->arr, config->arr_count);\nprintf(\"config->arrr: \");\nprintIntArray(config->arrr);\nprintf(\"config->arrrr: \");\nprintDoubleArray(config->arrrr);\nprintf(\"config->obj1.a:\\t%s\\n\", config->obj1.a);\nprintf(\"config->obj1.b:\\t%d\\n\", config->obj1.b);\nprintf(\"config->obj1.d:\\t%f\\n\", config->obj1.d);\nprintf(\"config->obj1.arr: \");\nprintStringsArray(config->obj1.arr, config->obj1.arr_count);\nprintf(\"config->obj1.arrr: \");\nprintIntArray(config->obj1.arrr);\nprintf(\"config->obj1.arrrr: \");\nprintDoubleArray(config->obj1.arrrr);\nprintf(\"config->obj2.a:\\t%s\\n\", config->obj2.a);\nprintf(\"config->obj2.b:\\t%d\\n\", config->obj2.b);\nprintf(\"config->obj2.d:\\t%f\\n\", config->obj2.d);\nprintf(\"config->obj2.arr: \");\nprintStringsArray(config->obj2.arr, config->obj2.arr_count);\nprintf(\"config->obj2.arrr: \");\nprintIntArray(config->obj2.arrr);\nprintf(\"config->obj2.arrrr: \");\nprintDoubleArray(config->obj2.arrrr);\n","{{GENERATE_CONFIG_TYPE}}":"typedef struct {\n\tchar* a;\n\tint b;\n\tdouble d;\n\tchar** arr;\n\tint arr_count;\n\tint* arrr;\n\tint arrr_count;\n\tdouble* arrrr;\n\tint arrrr_count;\n} obj1_config_t;\n\ntypedef struct {\n\tchar* a;\n\tint b;\n\tdouble d;\n\tchar** arr;\n\tint arr_count;\n\tint* arrr;\n\tint arrr_count;\n\tdouble* arrrr;\n\tint arrrr_count;\n} obj2_config_t;\n\ntypedef struct {\n\tchar* a;\n\tint b;\n\tdouble d;\n\tchar** arr;\n\tint arr_count;\n\tint* arrr;\n\tint arrr_count;\n\tdouble* arrrr;\n\tint arrrr_count;\n\tobj1_config_t obj1;\n\tobj2_config_t obj2;\n} config_t;\n","{{GENERATE_STRUCTURE_ALLOCATOR}}":"data->inverters.right.speed_size = 500;\ndata->inverters.right.speed = (inverters_right_speed_data*) malloc(sizeof(inverters_right_speed_data) * data->inverters.right.speed_size);\ndata->inverters.right.speed_count = 0;\ndata->inverters.right.temperature_igbt_size = 500;\ndata->inverters.right.temperature_igbt = (inverters_right_temperature_igbt_data*) malloc(sizeof(inverters_right_temperature_igbt_data) * data->inverters.right.temperature_igbt_size);\ndata->inverters.right.temperature_igbt_count = 0;\ndata->inverters.right.temperature_motors_size = 500;\ndata->inverters.right.temperature_motors = (inverters_right_temperature_motors_data*) malloc(sizeof(inverters_right_temperature_motors_data) * data->inverters.right.temperature_motors_size);\ndata->inverters.right.temperature_motors_count = 0;\ndata->inverters.left.speed_size = 500;\ndata->inverters.left.speed = (inverters_left_speed_data*) malloc(sizeof(inverters_left_speed_data) * data->inverters.left.speed_size);\ndata->inverters.left.speed_count = 0;\ndata->inverters.left.temperature_igbt_size = 500;\ndata->inverters.left.temperature_igbt = (inverters_left_temperature_igbt_data*) malloc(sizeof(inverters_left_temperature_igbt_data) * data->inverters.left.temperature_igbt_size);\ndata->inverters.left.temperature_igbt_count = 0;\ndata->inverters.left.temperature_motors_size = 500;\ndata->inverters.left.temperature_motors = (inverters_left_temperature_motors_data*) malloc(sizeof(inverters_left_temperature_motors_data) * data->inverters.left.temperature_motors_size);\ndata->inverters.left.temperature_motors_count = 0;\ndata->bms_hv.temperature_size = 500;\ndata->bms_hv.temperature = (bms_hv_temperature_data*) malloc(sizeof(bms_hv_temperature_data) * data->bms_hv.temperature_size);\ndata->bms_hv.temperature_count = 0;\ndata->bms_hv.voltage_size = 500;\ndata->bms_hv.voltage = (bms_hv_voltage_data*) malloc(sizeof(bms_hv_voltage_data) * data->bms_hv.voltage_size);\ndata->bms_hv.voltage_count = 0;\ndata->bms_hv.current_size = 500;\ndata->bms_hv.current = (bms_hv_current_data*) malloc(sizeof(bms_hv_current_data) * data->bms_hv.current_size);\ndata->bms_hv.current_count = 0;\ndata->bms_hv.errors_size = 500;\ndata->bms_hv.errors = (bms_hv_errors_data*) malloc(sizeof(bms_hv_errors_data) * data->bms_hv.errors_size);\ndata->bms_hv.errors_count = 0;\ndata->bms_hv.warnings_size = 500;\ndata->bms_hv.warnings = (bms_hv_warnings_data*) malloc(sizeof(bms_hv_warnings_data) * data->bms_hv.warnings_size);\ndata->bms_hv.warnings_count = 0;\ndata->bms_lv.values_size = 500;\ndata->bms_lv.values = (bms_lv_values_data*) malloc(sizeof(bms_lv_values_data) * data->bms_lv.values_size);\ndata->bms_lv.values_count = 0;\ndata->bms_lv.errors_size = 500;\ndata->bms_lv.errors = (bms_lv_errors_data*) malloc(sizeof(bms_lv_errors_data) * data->bms_lv.errors_size);\ndata->bms_lv.errors_count = 0;\ndata->gps.new_size = 500;\ndata->gps.new = (gps_new_data*) malloc(sizeof(gps_new_data) * data->gps.new_size);\ndata->gps.new_count = 0;\ndata->gps.old.location_size = 500;\ndata->gps.old.location = (gps_old_location_data*) malloc(sizeof(gps_old_location_data) * data->gps.old.location_size);\ndata->gps.old.location_count = 0;\ndata->gps.old.time_size = 500;\ndata->gps.old.time = (gps_old_time_data*) malloc(sizeof(gps_old_time_data) * data->gps.old.time_size);\ndata->gps.old.time_count = 0;\ndata->gps.old.true_track_mode_size = 500;\ndata->gps.old.true_track_mode = (gps_old_true_track_mode_data*) malloc(sizeof(gps_old_true_track_mode_data) * data->gps.old.true_track_mode_size);\ndata->gps.old.true_track_mode_count = 0;\ndata->imu_gyro_size = 500;\ndata->imu_gyro = (imu_gyro_data*) malloc(sizeof(imu_gyro_data) * data->imu_gyro_size);\ndata->imu_gyro_count = 0;\ndata->imu_accel_size = 500;\ndata->imu_accel = (imu_accel_data*) malloc(sizeof(imu_accel_data) * data->imu_accel_size);\ndata->imu_accel_count = 0;\ndata->front_wheels_encoder_size = 500;\ndata->front_wheels_encoder = (front_wheels_encoder_data*) malloc(sizeof(front_wheels_encoder_data) * data->front_wheels_encoder_size);\ndata->front_wheels_encoder_count = 0;\ndata->distance_size = 500;\ndata->distance = (distance_data*) malloc(sizeof(distance_data) * data->distance_size);\ndata->distance_count = 0;\ndata->throttle_size = 500;\ndata->throttle = (throttle_data*) malloc(sizeof(throttle_data) * data->throttle_size);\ndata->throttle_count = 0;\ndata->brake_size = 500;\ndata->brake = (brake_data*) malloc(sizeof(brake_data) * data->brake_size);\ndata->brake_count = 0;\ndata->steering_wheel.encoder_size = 500;\ndata->steering_wheel.encoder = (steering_wheel_encoder_data*) malloc(sizeof(steering_wheel_encoder_data) * data->steering_wheel.encoder_size);\ndata->steering_wheel.encoder_count = 0;\ndata->steering_wheel.gears_size = 500;\ndata->steering_wheel.gears = (steering_wheel_gears_data*) malloc(sizeof(steering_wheel_gears_data) * data->steering_wheel.gears_size);\ndata->steering_wheel.gears_count = 0;\n","{{GENERATE_STRUCTURE_DEALLOCATOR}}":"free(data->inverters.right.speed);\nfree(data->inverters.right.temperature_igbt);\nfree(data->inverters.right.temperature_motors);\nfree(data->inverters.left.speed);\nfree(data->inverters.left.temperature_igbt);\nfree(data->inverters.left.temperature_motors);\nfree(data->bms_hv.temperature);\nfree(data->bms_hv.voltage);\nfree(data->bms_hv.current);\nfree(data->bms_hv.errors);\nfree(data->bms_hv.warnings);\nfree(data->bms_lv.values);\nfree(data->bms_lv.errors);\nfree(data->gps.new);\nfree(data->gps.old.location);\nfree(data->gps.old.time);\nfree(data->gps.old.true_track_mode);\nfree(data->imu_gyro);\nfree(data->imu_accel);\nfree(data->front_wheels_encoder);\nfree(data->distance);\nfree(data->throttle);\nfree(data->brake);\nfree(data->steering_wheel.encoder);\nfree(data->steering_wheel.gears);\nfree(data);\n","{{GENERATE_STRUCTURE_TYPE}}":"typedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_right_speed_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_right_temperature_igbt_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_right_temperature_motors_data;\n\ntypedef struct {\n\tinverters_right_speed_data *speed;\n\tint speed_count;\n\tint speed_size;\n\tinverters_right_temperature_igbt_data *temperature_igbt;\n\tint temperature_igbt_count;\n\tint temperature_igbt_size;\n\tinverters_right_temperature_motors_data *temperature_motors;\n\tint temperature_motors_count;\n\tint temperature_motors_size;\n} inverters_right_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_left_speed_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_left_temperature_igbt_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} inverters_left_temperature_motors_data;\n\ntypedef struct {\n\tinverters_left_speed_data *speed;\n\tint speed_count;\n\tint speed_size;\n\tinverters_left_temperature_igbt_data *temperature_igbt;\n\tint temperature_igbt_count;\n\tint temperature_igbt_size;\n\tinverters_left_temperature_motors_data *temperature_motors;\n\tint temperature_motors_count;\n\tint temperature_motors_size;\n} inverters_left_data;\n\ntypedef struct {\n\tinverters_right_data right;\n\tinverters_left_data left;\n} inverters_data;\n\ntypedef struct {\n\tdouble max;\n\tdouble min;\n\tdouble average;\n} bms_hv_temperature_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_temperature_value_data value;\n} bms_hv_temperature_data;\n\ntypedef struct {\n\tdouble max;\n\tdouble min;\n\tdouble total;\n} bms_hv_voltage_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_voltage_value_data value;\n} bms_hv_voltage_data;\n\ntypedef struct {\n\tdouble current;\n\tdouble pow;\n} bms_hv_current_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_current_value_data value;\n} bms_hv_current_data;\n\ntypedef struct {\n\tint fault_id;\n\tint fault_index;\n} bms_hv_errors_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_errors_value_data value;\n} bms_hv_errors_data;\n\ntypedef struct {\n\tint fault_id;\n\tint fault_index;\n} bms_hv_warnings_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_hv_warnings_value_data value;\n} bms_hv_warnings_data;\n\ntypedef struct {\n\tbms_hv_temperature_data *temperature;\n\tint temperature_count;\n\tint temperature_size;\n\tbms_hv_voltage_data *voltage;\n\tint voltage_count;\n\tint voltage_size;\n\tbms_hv_current_data *current;\n\tint current_count;\n\tint current_size;\n\tbms_hv_errors_data *errors;\n\tint errors_count;\n\tint errors_size;\n\tbms_hv_warnings_data *warnings;\n\tint warnings_count;\n\tint warnings_size;\n} bms_hv_data;\n\ntypedef struct {\n\tdouble voltage;\n\tdouble temperature;\n} bms_lv_values_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tbms_lv_values_value_data value;\n} bms_lv_values_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} bms_lv_errors_data;\n\ntypedef struct {\n\tbms_lv_values_data *values;\n\tint values_count;\n\tint values_size;\n\tbms_lv_errors_data *errors;\n\tint errors_count;\n\tint errors_size;\n} bms_lv_data;\n\ntypedef struct {\n\tdouble latitude_GGA_safe;\n\tdouble longitude_GGA_safe;\n\tdouble latitude_GGA;\n\tdouble longitude_GGA;\n\tdouble altitude_GGA;\n\tchar* ns_indicator_GGA;\n\tchar* ew_indicator_GGA;\n\tchar* utc_time_GGA;\n\tdouble latitude_GLL;\n\tdouble longitude_GLL;\n\tchar* ns_indicator_GLL;\n\tchar* ew_indicator_GLL;\n\tchar* utc_time_GLL;\n\tdouble ground_speed_knots_VTG;\n\tdouble ground_speed_human_VTG;\n\tdouble latitude_RMC;\n\tdouble longitude_RMC;\n\tchar* ns_indicator_RMC;\n\tchar* ew_indicator_RMC;\n\tchar* utc_time_RMC;\n\tchar* date_RMC;\n\tdouble ground_speed_knots_RMC;\n} gps_new_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tgps_new_value_data value;\n} gps_new_data;\n\ntypedef struct {\n\tdouble latitude_m;\n\tint latitude_o;\n\tdouble longitude_m;\n\tint longitude_o;\n\tdouble speed;\n\tdouble altitude;\n} gps_old_location_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tgps_old_location_value_data value;\n} gps_old_location_data;\n\ntypedef struct {\n\tint hours;\n\tint minutes;\n\tint seconds;\n} gps_old_time_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tgps_old_time_value_data value;\n} gps_old_time_data;\n\ntypedef struct {\n\tlong timestamp;\n\tint value;\n} gps_old_true_track_mode_data;\n\ntypedef struct {\n\tgps_old_location_data *location;\n\tint location_count;\n\tint location_size;\n\tgps_old_time_data *time;\n\tint time_count;\n\tint time_size;\n\tgps_old_true_track_mode_data *true_track_mode;\n\tint true_track_mode_count;\n\tint true_track_mode_size;\n} gps_old_data;\n\ntypedef struct {\n\tgps_new_data *new;\n\tint new_count;\n\tint new_size;\n\tgps_old_data old;\n} gps_data;\n\ntypedef struct {\n\tdouble x;\n\tdouble y;\n\tdouble z;\n\tdouble scale;\n} imu_gyro_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\timu_gyro_value_data value;\n} imu_gyro_data;\n\ntypedef struct {\n\tdouble x;\n\tdouble y;\n\tdouble z;\n\tdouble scale;\n} imu_accel_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\timu_accel_value_data value;\n} imu_accel_data;\n\ntypedef struct {\n\tdouble speed;\n\tdouble speedms;\n} front_wheels_encoder_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tfront_wheels_encoder_value_data value;\n} front_wheels_encoder_data;\n\ntypedef struct {\n\tdouble meters;\n\tdouble rotations;\n\tdouble angle;\n\tdouble clock_period;\n} distance_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdistance_value_data value;\n} distance_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdouble value;\n} throttle_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdouble value;\n} brake_data;\n\ntypedef struct {\n\tlong timestamp;\n\tdouble value;\n} steering_wheel_encoder_data;\n\ntypedef struct {\n\tint control;\n\tint cooling;\n\tint map;\n} steering_wheel_gears_value_data;\n\ntypedef struct {\n\tlong timestamp;\n\tsteering_wheel_gears_value_data value;\n} steering_wheel_gears_data;\n\ntypedef struct {\n\tsteering_wheel_encoder_data *encoder;\n\tint encoder_count;\n\tint encoder_size;\n\tsteering_wheel_gears_data *gears;\n\tint gears_count;\n\tint gears_size;\n\tint marker;\n} steering_wheel_data;\n\ntypedef struct {\n\tint id;\n\tlong timestamp;\n\tchar* sessionName;\n\tinverters_data inverters;\n\tbms_hv_data bms_hv;\n\tbms_lv_data bms_lv;\n\tgps_data gps;\n\timu_gyro_data *imu_gyro;\n\tint imu_gyro_count;\n\tint imu_gyro_size;\n\timu_accel_data *imu_accel;\n\tint imu_accel_count;\n\tint imu_accel_size;\n\tfront_wheels_encoder_data *front_wheels_encoder;\n\tint front_wheels_encoder_count;\n\tint front_wheels_encoder_size;\n\tdistance_data *distance;\n\tint distance_count;\n\tint distance_size;\n\tthrottle_data *throttle;\n\tint throttle_count;\n\tint throttle_size;\n\tbrake_data *brake;\n\tint brake_count;\n\tint brake_size;\n\tsteering_wheel_data steering_wheel;\n} data_t;\n"}}}